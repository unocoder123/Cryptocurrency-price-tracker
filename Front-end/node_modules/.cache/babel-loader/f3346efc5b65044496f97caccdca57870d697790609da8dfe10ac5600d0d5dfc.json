{"ast":null,"code":"var _jsxFileName = \"/Users/pranavchandravarmapenmatcha/Desktop/cryptoalpha/cryptoalpha/src/components/Coininfo.js\",\n  _s = $RefreshSig$();\n// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\n// import { HistoricalChart } from \"../api\";\n// import { CryptoState } from \"../context\";\n// import {CircularProgress, createTheme, ThemeProvider } from \"@material-ui/core\";\n// import {Line} from 'react-chartjs-2';\n// import {makeStyles} from '@material-ui/core'\n// import Button from './Button'\n// const Coininfo= ({coin}) => {\n//     const chartdays = [\n//         {\n//           label: \"24 Hours\",\n//           value: 1,\n//         },\n//         {\n//           label: \"30 Days\",\n//           value: 30,\n//         },\n//         {\n//           label: \"3 Months\",\n//           value: 90,\n//         },\n//         {\n//           label: \"1 Year\",\n//           value: 365,\n//         },\n//       ];\n//     const darkTheme = createTheme({\n//         palette: {\n//           primary: {\n//             main: \"#fff\",\n//           },\n//           type: \"dark\",\n//         },\n//       });\n//       const useStyles = makeStyles((theme) => ({\n//         container: {\n//           width: \"75%\",\n//           display: \"flex\",\n//           flexDirection: \"column\",\n//           alignItems: \"center\",\n//           justifyContent: \"center\",\n//           marginTop: 25,\n//           padding: 40,\n//           [theme.breakpoints.down(\"md\")]: {\n//             width: \"100%\",\n//             marginTop: 0,\n//             padding: 20,\n//             paddingTop: 0,\n//           },\n//         },\n//       }));\n//       const classes = useStyles();\n//     const[hist, setHist] = useState();\n//     const [interval, setInterval] = useState(1);\n//     const {currency, symbol} = CryptoState();\n//     const getHistData = async () => {\n//         const {data} = await axios.get(HistoricalChart(coin.id, interval, currency))\n//         setHist(data.prices)\n//     }\n//     useEffect(() => {\n//         getHistData()\n//     }, [currency, interval])\n\n// return (\n//     <ThemeProvider theme={darkTheme}>\n//         <div className={classes.container}>\n//             {\n//                 !hist ? (\n//                     <CircularProgress style = {{color: \"gold\"}} size = {250} thickness={1}/>\n//                 ) : (\n//                     <>\n//                     {/* <Line\n//                     data = {{\n//                         labels: hist.map((coin) => {\n//                             var date = new Date(coin[0]);\n//                             var time = date.getHours() > 12\n//                       ? `${date.getHours() - 12}:${date.getMinutes()} PM`\n//                       : `${date.getHours()}:${date.getMinutes()} AM`;\n//                       return interval === 1 ? time : date.toLocaleDateString();\n//                         }),\n//                         datasets:[\n//                            {data : hist.map((coin) => {\n//                                return coin[1]\n//                             }),\n//                             label: `Price ( Past ${interval} Days ) in ${currency}`,\n//                             borderColor: \"#EEBC1D\",\n//                             }\n//                         ]\n//                     }}\n//                         options={{\n//                         elements: {\n//                             point: {\n//                             radius: 1,\n//                             },\n//                          },\n//                         }}\n//                      /> */}\n//                      <div style={{\n//                         display: \"flex\",\n//                         marginTop: 20,\n//                         justifyContent: \"space-around\",\n//                         width: \"100%\",\n//                         }}>\n//                     {chartdays.map((day)=> {\n//                         <Button key = {day.value} \n//                         onclick = {() => {setInterval(day.value)}}\n//                         selected = {day.value === interval}\n//                         >{day.label}</Button>\n//                     })}\n//                      </div>\n//                     </>\n//                 )\n//             }\n//         </div>\n//     </ThemeProvider>\n// )\n\n// }\n\n// export default Coininfo;\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { HistoricalChart } from \"../api\";\nimport { Line } from \"react-chartjs-2\";\nimport { CircularProgress, createTheme, makeStyles, ThemeProvider } from \"@material-ui/core\";\nimport SelectButton from \"./Button\";\nimport { CryptoState } from \"../context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CoinInfo = _ref => {\n  _s();\n  let {\n    coin\n  } = _ref;\n  const chartDays = [{\n    label: \"24 Hours\",\n    value: 1\n  }, {\n    label: \"30 Days\",\n    value: 30\n  }, {\n    label: \"3 Months\",\n    value: 90\n  }, {\n    label: \"1 Year\",\n    value: 365\n  }];\n  const [historicData, setHistoricData] = useState();\n  const [days, setDays] = useState(1);\n  const {\n    currency\n  } = CryptoState();\n  const [flag, setflag] = useState(false);\n  const useStyles = makeStyles(theme => ({\n    container: {\n      width: \"75%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      marginTop: 25,\n      padding: 40,\n      [theme.breakpoints.down(\"md\")]: {\n        width: \"100%\",\n        marginTop: 0,\n        padding: 20,\n        paddingTop: 0\n      }\n    }\n  }));\n  const classes = useStyles();\n  const fetchHistoricData = async () => {\n    const {\n      data\n    } = await axios.get(HistoricalChart(coin.id, days, currency));\n    setflag(true);\n    setHistoricData(data.prices);\n  };\n  console.log(coin);\n  useEffect(() => {\n    fetchHistoricData();\n  }, [days]);\n  const darkTheme = createTheme({\n    palette: {\n      primary: {\n        main: \"#fff\"\n      },\n      type: \"dark\"\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: darkTheme,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: !historicData | flag === false ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        style: {\n          color: \"gold\"\n        },\n        size: 250,\n        thickness: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Line, {\n          data: {\n            labels: historicData.map(coin => {\n              let date = new Date(coin[0]);\n              let time = date.getHours() > 12 ? `${date.getHours() - 12}:${date.getMinutes()} PM` : `${date.getHours()}:${date.getMinutes()} AM`;\n              return days === 1 ? time : date.toLocaleDateString();\n            }),\n            datasets: [{\n              data: historicData.map(coin => coin[1]),\n              label: `Price ( Past ${days} Days ) in ${currency}`,\n              borderColor: \"#EEBC1D\"\n            }]\n          }\n          //   options={{\n          //     elements: {\n          //       point: {\n          //         radius: 1,\n          //       },\n          //     },\n          //   }}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            marginTop: 20,\n            justifyContent: \"space-around\",\n            width: \"100%\"\n          },\n          children: chartDays.map(day => /*#__PURE__*/_jsxDEV(SelectButton, {\n            onClick: () => {\n              setDays(day.value);\n              setflag(false);\n            },\n            selected: day.value === days,\n            children: day.label\n          }, day.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(CoinInfo, \"pRIwOP/xWA+agRRCmXpWMjOFbso=\", true);\n_c = CoinInfo;\nexport default CoinInfo;\nvar _c;\n$RefreshReg$(_c, \"CoinInfo\");","map":{"version":3,"names":["axios","useEffect","useState","HistoricalChart","Line","CircularProgress","createTheme","makeStyles","ThemeProvider","SelectButton","CryptoState","CoinInfo","coin","chartDays","label","value","historicData","setHistoricData","days","setDays","currency","flag","setflag","useStyles","theme","container","width","display","flexDirection","alignItems","justifyContent","marginTop","padding","breakpoints","down","paddingTop","classes","fetchHistoricData","data","get","id","prices","console","log","darkTheme","palette","primary","main","type","color","labels","map","date","Date","time","getHours","getMinutes","toLocaleDateString","datasets","borderColor","day"],"sources":["/Users/pranavchandravarmapenmatcha/Desktop/cryptoalpha/cryptoalpha/src/components/Coininfo.js"],"sourcesContent":["// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\n// import { HistoricalChart } from \"../api\";\n// import { CryptoState } from \"../context\";\n// import {CircularProgress, createTheme, ThemeProvider } from \"@material-ui/core\";\n// import {Line} from 'react-chartjs-2';\n// import {makeStyles} from '@material-ui/core'\n// import Button from './Button'\n// const Coininfo= ({coin}) => {\n//     const chartdays = [\n//         {\n//           label: \"24 Hours\",\n//           value: 1,\n//         },\n//         {\n//           label: \"30 Days\",\n//           value: 30,\n//         },\n//         {\n//           label: \"3 Months\",\n//           value: 90,\n//         },\n//         {\n//           label: \"1 Year\",\n//           value: 365,\n//         },\n//       ];\n//     const darkTheme = createTheme({\n//         palette: {\n//           primary: {\n//             main: \"#fff\",\n//           },\n//           type: \"dark\",\n//         },\n//       });\n//       const useStyles = makeStyles((theme) => ({\n//         container: {\n//           width: \"75%\",\n//           display: \"flex\",\n//           flexDirection: \"column\",\n//           alignItems: \"center\",\n//           justifyContent: \"center\",\n//           marginTop: 25,\n//           padding: 40,\n//           [theme.breakpoints.down(\"md\")]: {\n//             width: \"100%\",\n//             marginTop: 0,\n//             padding: 20,\n//             paddingTop: 0,\n//           },\n//         },\n//       }));\n//       const classes = useStyles();\n//     const[hist, setHist] = useState();\n//     const [interval, setInterval] = useState(1);\n//     const {currency, symbol} = CryptoState();\n//     const getHistData = async () => {\n//         const {data} = await axios.get(HistoricalChart(coin.id, interval, currency))\n//         setHist(data.prices)\n//     }\n//     useEffect(() => {\n//         getHistData()\n//     }, [currency, interval])\n\n// return (\n//     <ThemeProvider theme={darkTheme}>\n//         <div className={classes.container}>\n//             {\n//                 !hist ? (\n//                     <CircularProgress style = {{color: \"gold\"}} size = {250} thickness={1}/>\n//                 ) : (\n//                     <>\n//                     {/* <Line\n//                     data = {{\n//                         labels: hist.map((coin) => {\n//                             var date = new Date(coin[0]);\n//                             var time = date.getHours() > 12\n//                       ? `${date.getHours() - 12}:${date.getMinutes()} PM`\n//                       : `${date.getHours()}:${date.getMinutes()} AM`;\n//                       return interval === 1 ? time : date.toLocaleDateString();\n//                         }),\n//                         datasets:[\n//                            {data : hist.map((coin) => {\n//                                return coin[1]\n//                             }),\n//                             label: `Price ( Past ${interval} Days ) in ${currency}`,\n//                             borderColor: \"#EEBC1D\",\n//                             }\n//                         ]\n//                     }}\n//                         options={{\n//                         elements: {\n//                             point: {\n//                             radius: 1,\n//                             },\n//                          },\n//                         }}\n//                      /> */}\n//                      <div style={{\n//                         display: \"flex\",\n//                         marginTop: 20,\n//                         justifyContent: \"space-around\",\n//                         width: \"100%\",\n//                         }}>\n//                     {chartdays.map((day)=> {\n//                         <Button key = {day.value} \n//                         onclick = {() => {setInterval(day.value)}}\n//                         selected = {day.value === interval}\n//                         >{day.label}</Button>\n//                     })}\n//                      </div>\n//                     </>\n//                 )\n//             }\n//         </div>\n//     </ThemeProvider>\n// )\n\n// }\n\n// export default Coininfo;\n\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { HistoricalChart } from \"../api\"\nimport { Line } from \"react-chartjs-2\";\nimport {\n  CircularProgress,\n  createTheme,\n  makeStyles,\n  ThemeProvider,\n} from \"@material-ui/core\";\nimport SelectButton from \"./Button\";\nimport { CryptoState } from \"../context\";\n\nconst CoinInfo = ({ coin }) => {\n        const chartDays = [\n        {\n          label: \"24 Hours\",\n          value: 1,\n        },\n        {\n          label: \"30 Days\",\n          value: 30,\n        },\n        {\n          label: \"3 Months\",\n          value: 90,\n        },\n        {\n          label: \"1 Year\",\n          value: 365,\n        },\n      ];\n  const [historicData, setHistoricData] = useState();\n  const [days, setDays] = useState(1);\n  const { currency } = CryptoState();\n  const [flag,setflag] = useState(false);\n\n  const useStyles = makeStyles((theme) => ({\n    container: {\n      width: \"75%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      marginTop: 25,\n      padding: 40,\n      [theme.breakpoints.down(\"md\")]: {\n        width: \"100%\",\n        marginTop: 0,\n        padding: 20,\n        paddingTop: 0,\n      },\n    },\n  }));\n\n  const classes = useStyles();\n\n  const fetchHistoricData = async () => {\n    const { data } = await axios.get(HistoricalChart(coin.id, days, currency));\n    setflag(true);\n    setHistoricData(data.prices);\n  };\n\n  console.log(coin);\n\n  useEffect(() => {\n    fetchHistoricData();\n  }, [days]);\n\n  const darkTheme = createTheme({\n    palette: {\n      primary: {\n        main: \"#fff\",\n      },\n      type: \"dark\",\n    },\n  });\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <div className={classes.container}>\n        {!historicData | flag===false ? (\n          <CircularProgress\n            style={{ color: \"gold\" }}\n            size={250}\n            thickness={1}\n          />\n        ) : (\n          <>\n            <Line\n              data={{\n                labels: historicData.map((coin) => {\n                  let date = new Date(coin[0]);\n                  let time =\n                    date.getHours() > 12\n                      ? `${date.getHours() - 12}:${date.getMinutes()} PM`\n                      : `${date.getHours()}:${date.getMinutes()} AM`;\n                  return days === 1 ? time : date.toLocaleDateString();\n                }),\n\n                datasets: [\n                  {\n                    data: historicData.map((coin) => coin[1]),\n                    label: `Price ( Past ${days} Days ) in ${currency}`,\n                    borderColor: \"#EEBC1D\",\n                  },\n                ],\n              }}\n            //   options={{\n            //     elements: {\n            //       point: {\n            //         radius: 1,\n            //       },\n            //     },\n            //   }}\n            />\n            <div\n              style={{\n                display: \"flex\",\n                marginTop: 20,\n                justifyContent: \"space-around\",\n                width: \"100%\",\n              }}\n            >\n              {chartDays.map((day) => (\n                <SelectButton\n                  key={day.value}\n                  onClick={() => {setDays(day.value);\n                    setflag(false);\n                  }}\n                  selected={day.value === days}\n                >\n                  {day.label}\n                </SelectButton>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default CoinInfo;"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}